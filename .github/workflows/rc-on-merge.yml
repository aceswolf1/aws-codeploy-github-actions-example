name: Create Release Candidate

# Trigger when a PR is merged to main
on:
  push:
    branches:
      - main

jobs:
  create-release-candidate:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # Required to create tags and branches
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Step 2: Configure Git
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      # Step 3: Set up Node.js (required for nodejs release type)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'  # Adjust to your project's Node version
      
      # Step 4: Install dependencies (if needed for build/test)
      # Note: Skipping npm install to avoid creating package-lock.json
      # The release script only needs package.json to exist
      # Uncomment below if your project requires dependencies to be installed
      # - name: Install dependencies
      #   run: |
      #     if [ -f package.json ]; then
      #       if [ -f package-lock.json ]; then
      #         npm ci
      #       else
      #         npm install
      #       fi
      #     fi
      
      # Step 5: Download release scripts to /tmp (outside git)
      - name: Download release management scripts
        run: |
          # Use /tmp to avoid git tracking issues
          SCRIPT_DIR="/tmp/release-scripts-$$"
          mkdir -p "$SCRIPT_DIR"
          cd "$SCRIPT_DIR"
          
          # Set variables (using master for deprecated version)
          REF="${{ vars.RELEASE_SCRIPT_REF || 'master' }}"
          TYPES="${{ vars.RELEASE_TYPES || 'nodejs' }}"
          
          echo "=========================================="
          echo "Downloading scripts from ref: $REF"
          echo "Types: $TYPES"
          echo "Script directory: $SCRIPT_DIR"
          echo "=========================================="
          
          # Download the main release script
          curl -s -f -o release https://raw.githubusercontent.com/frontedgedigital/release-management/$REF/release || {
            echo "Failed to download release script"
            exit 1
          }
          chmod +x release
          
          # Download type-specific scripts
          for type in $TYPES; do
            echo "Downloading release-$type"
            curl -s -f -o release-$type https://raw.githubusercontent.com/frontedgedigital/release-management/$REF/release-$type || {
              echo "Failed to download release-$type script"
              exit 1
            }
            chmod +x release-$type
          done
          
          # Download tagging script
          curl -s -f -o tag-nodejs https://raw.githubusercontent.com/frontedgedigital/release-management/$REF/tag-nodejs || {
            echo "Warning: Failed to download tag-nodejs script"
          }
          chmod +x tag-nodejs 2>/dev/null || true
          
          # Save script directory for next steps
          echo "SCRIPT_DIR=$SCRIPT_DIR" >> $GITHUB_ENV
          
          cd "$GITHUB_WORKSPACE"
      
      # Step 6: Ensure clean git working directory
      - name: Clean git working directory
        run: |
          echo "Checking git status..."
          git status
          
          # Show untracked files
          echo ""
          echo "Untracked files:"
          UNTRACKED=$(git ls-files --others --exclude-standard)
          echo "$UNTRACKED"
          
          # If there are any untracked files, add them to .gitignore
          if [ -n "$UNTRACKED" ]; then
            echo ""
            echo "Adding untracked files to .gitignore..."
            
            # Create or append to .gitignore
            if [ ! -f .gitignore ]; then
              echo "# Auto-generated by GitHub Actions" > .gitignore
            fi
            
            CHANGES_MADE=false
            
            # Add each untracked file to .gitignore if not already there
            while IFS= read -r file; do
              # Skip empty lines
              [ -z "$file" ] && continue
              
              # Check if file or pattern already in .gitignore
              if ! grep -qF "$file" .gitignore 2>/dev/null; then
                echo "$file" >> .gitignore
                echo "  âœ“ Added: $file"
                CHANGES_MADE=true
              fi
            done <<< "$UNTRACKED"
            
            # If changes were made, commit them
            if [ "$CHANGES_MADE" = true ]; then
              git add .gitignore
              git commit -m "chore: update gitignore for untracked files [skip ci]"
              echo ""
              echo "âœ“ Committed .gitignore changes"
            fi
          fi
          
          echo ""
          echo "Final git status:"
          git status --short
      
      # Step 7: Execute the release candidate creation
      - name: Create Release Candidate
        env:
          HUSKY_SKIP_HOOKS: 1
          GIT_COMMIT_OPTS: --no-verify
          GIT_PUSH_OPTS: --no-verify
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get types and format them (space to plus conversion)
          TYPES="${{ vars.RELEASE_TYPES || 'nodejs' }}"
          TYPES_FORMATTED=$(echo -n "$TYPES" | tr ' ' '+')
          
          echo "=========================================="
          echo "Creating Release Candidate"
          echo "Types: $TYPES_FORMATTED"
          echo "Release Level: pre"
          echo "Working Directory: $(pwd)"
          echo "Package.json exists: $([ -f package.json ] && echo 'YES' || echo 'NO')"
          echo "Script location: $SCRIPT_DIR/release"
          echo "Using branch: main"
          echo "=========================================="
          
          # Add the script directory to PATH so release script can find its dependencies
          export PATH="$SCRIPT_DIR:$PATH"
          
          # Execute the release script with MASTER=main
          # This tells the script to treat 'main' as the master branch
          # Usage: MASTER=main ./release <type> <release-level>
          MASTER=main "$SCRIPT_DIR/release" $TYPES_FORMATTED pre
      
      # Step 8: Push changes and create RC branch
      - name: Push changes
        run: |
          echo "Pushing tags and branches..."
          # Push main branch (which now has the release commit)
          git push origin main --no-verify || echo "Main branch already pushed"
          
          # Push all tags
          git push origin --tags --no-verify || echo "Tags already pushed"
      
      # Step 8b: Create RC branch from the tag
      - name: Create RC branch
        run: |
          # Get the latest tag (the one we just created)
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Latest tag: $LATEST_TAG"
          
          # Check if it's a pre-release tag
          if [[ $LATEST_TAG =~ -pre\. ]]; then
            # Extract version without 'v' prefix if present
            RC_VERSION=${LATEST_TAG#v}
            RC_BRANCH="rc/$RC_VERSION"
            
            echo "Creating RC branch: $RC_BRANCH"
            
            # Create branch from the tag
            git checkout -b "$RC_BRANCH" "$LATEST_TAG"
            
            # Push the RC branch to remote
            git push origin "$RC_BRANCH" --no-verify
            
            echo "âœ“ Created and pushed RC branch: $RC_BRANCH"
          else
            echo "Not a pre-release tag, skipping RC branch creation"
          fi
          
          # Switch back to main
          git checkout main
      
      # Step 9: Output the created tag
      - name: Get created tag
        id: get_tag
        run: |
          # Get the latest tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "unknown")
          echo "Created tag: $latest_tag"
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT
          
          # Get all tags created in this run
          echo "All recent tags:"
          git tag --sort=-creatordate | head -5
      
      # Step 10: Get RC branch if created
      - name: Get RC branch info
        id: get_branch
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0)
          
          # Fetch all branches to see the newly created one
          git fetch --all
          
          # Check if it's a pre-release and get the RC branch name
          if [[ $LATEST_TAG =~ -pre\. ]]; then
            RC_VERSION=${LATEST_TAG#v}
            RC_BRANCH="rc/$RC_VERSION"
            
            # Verify the branch exists on remote
            if git ls-remote --heads origin "$RC_BRANCH" | grep -q "$RC_BRANCH"; then
              echo "rc_branch=$RC_BRANCH" >> $GITHUB_OUTPUT
              echo "RC Branch: $RC_BRANCH"
            else
              echo "rc_branch=none" >> $GITHUB_OUTPUT
              echo "RC Branch creation may have failed"
            fi
          else
            echo "rc_branch=none" >> $GITHUB_OUTPUT
            echo "Not a pre-release"
          fi
      
      # Step 11: Create GitHub Release
      - name: Create GitHub Release
        if: steps.get_tag.outputs.tag != 'unknown'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Release Candidate ${{ steps.get_tag.outputs.tag }}
          body: |
            ðŸš€ Release Candidate created from merge to main
            
            **Details:**
            - Tag: `${{ steps.get_tag.outputs.tag }}`
            - Branch: `${{ steps.get_branch.outputs.rc_branch }}`
            - Commit: ${{ github.sha }}
            - Author: @${{ github.actor }}
            
            **Triggered by:** Merge to main
            
            This is a pre-release version for testing.
          draft: false
          prerelease: true
      
      # Step 12: Job summary
      - name: Job Summary
        if: always()
        run: |
          echo "### Release Candidate Creation Summary ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Created Tag:** \`${{ steps.get_tag.outputs.tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**RC Branch:** \`${{ steps.get_branch.outputs.rc_branch }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Deploy tag \`${{ steps.get_tag.outputs.tag }}\` to staging/test environment" >> $GITHUB_STEP_SUMMARY
          echo "- Test the release candidate" >> $GITHUB_STEP_SUMMARY
          echo "- Promote to production when ready" >> $GITHUB_STEP_SUMMARY