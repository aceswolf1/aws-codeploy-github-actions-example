name: Manual Branch Strategy

# Allows manual triggering with custom parameters
on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (nodejs, python, etc.)'
        required: true
        default: 'nodejs'
        type: string
      
      script_ref:
        description: 'Branch/tag of release-management repo to use'
        required: false
        default: 'master'
        type: string
      
      release_mode:
        description: 'Release mode'
        required: true
        type: choice
        options:
          - prerelease
          - patch
          - minor
          - major
        default: 'prerelease'
      
      custom_args:
        description: 'Additional arguments for release script'
        required: false
        type: string

jobs:
  execute-branch-strategy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Download release management scripts
        run: |
          mkdir -p .release-scripts
          cd .release-scripts
          
          REF="${{ inputs.script_ref }}"
          TYPES="${{ inputs.release_type }}"
          
          echo "=========================================="
          echo "Configuration:"
          echo "  Script Ref: $REF"
          echo "  Types: $TYPES"
          echo "  Release Mode: ${{ inputs.release_mode }}"
          echo "  Custom Args: ${{ inputs.custom_args }}"
          echo "=========================================="
          
          # Download scripts
          curl -s -o release https://raw.githubusercontent.com/frontedgedigital/release-management/$REF/release
          chmod +x release
          
          for type in $TYPES; do
            echo "Downloading release-$type"
            curl -s -o release-$type https://raw.githubusercontent.com/frontedgedigital/release-management/$REF/release-$type
            chmod +x release-$type
          done
          
          curl -s -o tag-nodejs https://raw.githubusercontent.com/frontedgedigital/release-management/$REF/tag-nodejs
          chmod +x tag-nodejs
          
          cd ..
      
      - name: Execute branch strategy
        env:
          HUSKY_SKIP_HOOKS: 1
          GIT_COMMIT_OPTS: --no-verify
          GIT_PUSH_OPTS: --no-verify
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd .release-scripts
          
          TYPES="${{ inputs.release_type }}"
          TYPES_FORMATTED=$(echo -n "$TYPES" | tr ' ' '+')
          
          # Build the command with all arguments
          COMMAND="./release $TYPES_FORMATTED"
          
          # Add release mode flag
          case "${{ inputs.release_mode }}" in
            prerelease)
              COMMAND="$COMMAND --prerelease"
              ;;
            patch)
              COMMAND="$COMMAND --patch"
              ;;
            minor)
              COMMAND="$COMMAND --minor"
              ;;
            major)
              COMMAND="$COMMAND --major"
              ;;
          esac
          
          # Add custom arguments if provided
          if [ -n "${{ inputs.custom_args }}" ]; then
            COMMAND="$COMMAND ${{ inputs.custom_args }}"
          fi
          
          echo "Executing: $COMMAND"
          eval $COMMAND
      
      - name: Report results
        if: always()
        run: |
          echo "=========================================="
          echo "Branch Strategy Execution Complete"
          echo "=========================================="
          
          # Show latest tags
          echo "Latest tags:"
          git tag --sort=-creatordate | head -5
          
          # Show current branch
          echo ""
          echo "Current branch:"
          git branch --show-current
          
          # Show recent commits
          echo ""
          echo "Recent commits:"
          git log --oneline -5
          
          echo "=========================================="
      
      - name: Get created tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "no-tag-created")
          echo "tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "Latest tag: $latest_tag"
      
      - name: Summary
        run: |
          echo "### Branch Strategy Execution Summary :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Release Type: ${{ inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- Release Mode: ${{ inputs.release_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "- Script Ref: ${{ inputs.script_ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Result:**" >> $GITHUB_STEP_SUMMARY
          echo "- Created Tag: ${{ steps.get_tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY